---
title: "STAT 331 Portfolio"
author: "Kristen Ho"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an [A-.]{.underline}

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

#Lab 2, Question 1
surveys <- read_csv(here::here("Week 2", "Lab 2", "surveys.csv"))
```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2

#Lab 3, Question 2
evals <- read_csv(here::here("Week 3", "Lab 3", "teacher_evals.csv"))
```

-   `xlsx`

```{r}
#| label: wd-1-xlsx

```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1

#Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)

```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

#Lab 5, The woman who hired Jeremy Bowers
# revised to remove event_id
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  select(-event_id) |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)
```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3


#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, census_region, starts_with("mc_")) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1

#Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)



```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1

# Challenge 3, Question 1
teacher_evals_compare <- evals |>
  filter(question_no == 903) |>
  mutate(set_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
         sen_level = case_when(seniority <= 4 ~ "junior",
                               seniority <= 8 ~ "senior",
                               seniority > 8 ~ "very senior")) |>
  select(course_id, set_level, sen_level)
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character

# Lab 5
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)

```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string

# Lab 5
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date

# Lab 5
# made revision 
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1

#Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2

# Challenge 3, Question 1
teacher_evals_compare <- evals |>
  filter(question_no == 903) |>
  mutate(set_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
         sen_level = case_when(seniority <= 4 ~ "junior",
                               seniority <= 8 ~ "senior",
                               seniority > 8 ~ "very senior")) |>
  select(course_id, set_level, sen_level)

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1

# Lab 4, Question 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(.f = county_name,
                                      "Superior County" = superior_counties,
                                      "North Coast" = north_coast_counties,
                                      "San Francisco Bay Area"  = san_fran_counties,
                                      "Central Coast" = central_coast_counties,
                                      "Southern San Joaquin Valley" = s_san_joaquin_counties,
                                      "Northern San Joaquin Valley" = n_san_joaquin_counties,
                                      "Inland Empire" = inland_counties,
                                      "Los Angeles County" = la_county,
                                      "Orange County" = orange_county,
                                      "San Diego-Imperial" = san_diego_imperial_counties
                                      ))

```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))

```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string

# Lab 4, Question 4
ca_childcare <- ca_childcare |> 
  mutate(county_name = str_remove(county_name, " County"),
         census_region = fct_collapse(.f = county_name,
                                      "Superior County" = superior_counties,
                                      "North Coast" = north_coast_counties,
                                      "San Francisco Bay Area"  = san_fran_counties,
                                      "Central Coast" = central_coast_counties,
                                      "Southern San Joaquin Valley" = s_san_joaquin_counties,
                                      "Northern San Joaquin Valley" = n_san_joaquin_counties,
                                      "Inland Empire" = inland_counties,
                                      "Los Angeles County" = la_county,
                                      "Orange County" = orange_county,
                                      "San Diego-Imperial" = san_diego_imperial_counties
                                      ))
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date


#Lab 5
#Made revision 
get_fit_now_check_in |>
  left_join(get_fit_now_member, by = join_by(membership_id == id)) |>
  left_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, by = join_by(license_id == id)) |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(str_detect(membership_id, "^48Z"),
         membership_status == "gold",
         str_detect(plate_number, "H42W*"),
         check_in_date == "2018-01-09") |>
  pull(person_id, name.x)
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1

# Lab 5
# made revision 
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)

```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right

#Lab 4, Question 3
ca_childcare <- 
  right_join(x = ca_childcare,
            y = tax_rev,
            by = join_by(county_name == entity_name, study_year == year))
```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

#Lab 5
#Made revision 
get_fit_now_check_in |>
  left_join(get_fit_now_member, by = join_by(membership_id == id)) |>
  left_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, by = join_by(license_id == id)) |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(str_detect(membership_id, "^48Z"),
         membership_status == "gold",
         str_detect(plate_number, "H42W*"),
         check_in_date == "2018-01-09") |>
  pull(person_id, name.x)
```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1

#Lab 4, Question 2
ca_childcare <- 
  filter(.data = counties, state_abbreviation == "CA") |>
  inner_join(y = childcare_costs,
            by = join_by(county_fips_code)) 
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2

#Lab 5
#Made revision 
get_fit_now_check_in |>
  left_join(get_fit_now_member, by = join_by(membership_id == id)) |>
  left_join(person, by = join_by(person_id == id)) |>
  inner_join(drivers_license, by = join_by(license_id == id)) |>
  mutate(check_in_date = ymd(check_in_date)) |>
  filter(str_detect(membership_id, "^48Z"),
         membership_status == "gold",
         str_detect(plate_number, "H42W*"),
         check_in_date == "2018-01-09") |>
  pull(person_id, name.x)
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi


# Lab 5
features <- tibble(car_make = "Tesla",
                   car_model = "Model S",
                   hair_color = "red",
                   gender = "female")

facebook_event_checkin |>
  left_join(person, by = join_by(person_id == id)) |>
  left_join(drivers_license, by = join_by(license_id == id)) |>
  filter(height %in% c(65, 66, 67),
         str_detect(event_name, pattern = "SQL Symphony Concert"))|>
  semi_join(features, by = join_by(car_make,
                                   car_model,
                                   hair_color,
                                   gender)) |>
  mutate(date = ymd(date))|>
  filter(year(date) == 2017,
         month(date) == 12) |>
  group_by(person_id) |>
  summarize(event_count  = n()) |>
  filter(event_count == 3) |>
  left_join(person, by = join_by(person_id == id)) |>
  pull(person_id, name)
```

-   `anti_join()`

```{r}
#| label: wd-6-anti

#Lab 5 
#Revised to add an anti-join 
person |>
  anti_join(interview, by = join_by(id == person_id)) |>
  filter(id == 99716) |>
  pull(id, name)
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, census_region, starts_with("mc_")) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide

# Lab 4, Question 6
ca_childcare |>
  select(study_year, mc_infant, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mc_infant = median(mc_infant, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
             values_from = median_mc_infant,
             names_prefix = "Year_") |>
  slice_min(order_by = Year_2018)
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1 - Lab 3
-   Example 2 - Challenge 3
-   Example 3 - Lab 4
-   Example 4 - Challenge 4
-   Example 5 - Lab 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2

# Lab 4, Question 6
ca_childcare |>
  select(study_year, mc_infant, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mc_infant = median(mc_infant, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
             values_from = median_mc_infant,
             names_prefix = "Year_") |>
  slice_min(order_by = Year_2018)

```

-   Example of function formatting

```{r}
#| label: r-2-3

```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example


# Lab 4, Question 6
ca_childcare |>
  select(study_year, mc_infant, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mc_infant = median(mc_infant, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
             values_from = median_mc_infant,
             names_prefix = "Year_") |>
  slice_min(order_by = Year_2018)
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num

# Lab 4, Question 8
ggplot(data = ca_childcare, 
       mapping = aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "darkslategray4") +
  geom_smooth(method = "lm", color = "red", alpha = 0.5) +
  labs(title = "Relationship Between Median Household Income and \nWeekly Price of Infant Center-Based Childcare",
       x = "Median Household Income (2018 dollars)",
       y = "Center-Based Infant Childcare \nMedian Weekly Price ($)") 
```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat

# Challenge 2, Hot: Embedding the Legend in the Plot Title
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, color = sex)) +
  geom_jitter(alpha = 0.5, color = "steelblue") +
  scale_color_manual(values = c( "M" = "blue","F" = "green")) +
  geom_boxplot(outliers = FALSE) +
  labs(title = "Distribution of Weight for Each Species",
        subtitle = " Sex: M = <span style = 'color:blue;'>O</span> ; F = <span style = 'color:green;'>O</span>",
        x = "Species",
        y = "Weight of Animal (g)") +
  theme(legend.position='none',
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.subtitle = element_markdown(size = 12),
        plot.title = element_text(size = 14, face = "bold")
          )
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat

# Lab 2, Question 4
ggplot(data = surveys,
       mapping = aes(x = weight, y = hindfoot_length)) +
  geom_point(alpha = 0.5) +
  facet_wrap(~species, scales = "free_x")+
  labs(title = "Comparison of Hindfoot Length and Weight of Different Species of Rodents",
       x = "Weight of Animal (g)",
       y = NULL,
       subtitle = "Hindfoot Length of Animal (mm)")
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2


#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3

#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))

```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4

# Challenge 2, Hot: Embedding the Legend in the Plot Title
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, color = sex)) +
  geom_jitter(alpha = 0.5, color = "steelblue") +
  scale_color_manual(values = c( "M" = "blue","F" = "green")) +
  geom_boxplot(outliers = FALSE) +
  labs(title = "Distribution of Weight for Each Species",
        subtitle = " Sex: M = <span style = 'color:blue;'>O</span> ; F = <span style = 'color:green;'>O</span>",
        x = "Species",
        y = "Weight of Animal (g)") +
  theme(legend.position='none',
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.subtitle = element_markdown(size = 12),
        plot.title = element_text(size = 14, face = "bold")
          )

```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5


#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))

```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1

#Lab 4, Question 7
#Graph before making the revision to the colors in the example 
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool")))|>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(c("darkseagreen", 
                                                 "cyan",
                                                 "pink",
                                                 "salmon", 
                                                 "deepskyblue", 
                                                 "purple",
                                                 "orange", 
                                                 "red", 
                                                 "brown", 
                                                 "yellow"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2

#Lab 4, Question 8 
#Revised colors used for geom_smooth
ggplot(data = ca_childcare, 
       mapping = aes(x = mhi_2018, y = mc_infant)) +
  geom_point(color = "darkslategray4") +
  geom_smooth(method = "lm", color = "coral3", alpha = 0.5) +
  labs(title = "Relationship Between Median Household Income and \nWeekly Price of Infant Center-Based Childcare",
       x = "Median Household Income (2018 dollars)",
       y = "Center-Based Infant Childcare \nMedian Weekly Price ($)") 

```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2


# Challenge 2, Hot: Embedding the Legend in the Plot Title
ggplot(data = surveys,
       mapping = aes(x = species, y = weight, color = sex)) +
  geom_jitter(alpha = 0.5, color = "steelblue") +
  scale_color_manual(values = c( "M" = "blue","F" = "green")) +
  geom_boxplot(outliers = FALSE) +
  labs(title = "Distribution of Weight for Each Species",
        subtitle = " Sex: M = <span style = 'color:blue;'>O</span> ; F = <span style = 'color:green;'>O</span>",
        x = "Species",
        y = "Weight of Animal (g)") +
  theme(legend.position='none',
        axis.text.x = element_text(angle = 45, hjust = 1),
        plot.subtitle = element_markdown(size = 12),
        plot.title = element_text(size = 14, face = "bold")
          )

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

# Challenge 4
ca_childcare |>
  mutate(Center_based = mcsa,
         Family = mfccsa) |>
  pivot_longer(cols = c(Center_based, Family),
             names_to = "childcare_type",
             values_to = "median_price") |>
  ggplot(mapping = aes(x = study_year, 
                       y = median_price,
                       color = childcare_type)) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(100, 180),
                     breaks = seq(100,180,20)) +
  scale_color_manual(values = colorRampPalette(c("blue","red"))(2)) +
  geom_point(alpha = 0.5) +
  geom_smooth() +
  theme_bw() +
  labs(title = "Weekly Median Price of Center-Based Childcare vs. \nFamily Childcare Across California ($)",
       x = "Study Year",
       y = NULL,
       color = "Childcare Type")
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize

#Lab 3, Question 12
teacher_evals_clean |>
  filter(academic_degree %in% c("dr", "prof")) |>
  group_by(teacher_id) |>
  summarize(
    seniority = first(seniority),
    sex = first(sex),
    avg_rating = mean(resp_share, na.rm = TRUE),
    n_courses = n_distinct(course_id),
    .group = "drop"
  ) |>
  filter(
    avg_rating == min(avg_rating)|
    avg_rating == max(avg_rating)
  ) 
```

-   Example using `across()`

```{r}
#| label: dvs-4-across

# Lab 3, Question 6
summarize(teacher_evals_clean,
          across(.cols = c(teacher_id, course_id),
                 .fns = n_distinct,
                 .names = "unique_{.col}"))


```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1

# Lab 4, Question 5
ca_childcare |>
  select(study_year, mhi_2018, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mhi_2018 = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018,
              names_prefix = "Median Household Income of Year ") |>
  arrange(desc("Median Household Income of Year 2018"))

```

-   Example 2

```{r}
#| label: dvs-5-2

# Lab 3, Question 9
teacher_evals_clean |>
  count(teacher_id, course_id, sort = TRUE) |>
  filter(n == 9) |>
  summarize(num_combos = n())

```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1

# Lab 4, Question 5
ca_childcare |>
  select(study_year, mhi_2018, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mhi_2018 = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018,
              names_prefix = "Median Household Income of Year ") |>
  arrange(desc("Median Household Income of Year 2018"))

```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3


# Lab 4, Question 5
ca_childcare |>
  select(study_year, mhi_2018, census_region) |>
  filter(study_year %in% c(2008, 2018)) |>
  group_by(census_region, study_year) |>
  summarize(median_mhi_2018 = median(mhi_2018, na.rm = TRUE),
            .groups = "drop") |>
  pivot_wider(names_from = study_year,
              values_from = median_mhi_2018,
              names_prefix = "Median Household Income of Year ") |>
  arrange(desc("Median Household Income of Year 2018"))
```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1

```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2

```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call

#Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)
```

-   using `across()`

```{r}
#| label: pe-1-across

#Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

# Lab 3, Question 5
teacher_evals_clean <- evals |>
  rename(sex = gender) |>
  mutate(teacher_id = as.character(teacher_id),
         question_no = as.character(question_no),
         across(
           .cols = c(no_participants, 
                     resp_share, 
                     SET_score_avg, 
                     percent_failed_cur, 
                     seniority),
           .fns = ~ as.numeric(.x)
           )
         )|>
  filter(no_participants > 10) |>
  select(course_id,
         teacher_id,
         question_no,
         no_participants,
         resp_share,
         SET_score_avg,
         percent_failed_cur,
         academic_degree,
         seniority,
         sex)

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

# Challenge 3, Question 2
# Revised percent() function to use label_percent() since percent() is a superseeded function
library(scales)
ggplot(data = teacher_evals_compare,
       mapping = aes(x = sen_level, fill = set_level)) +
  geom_bar(position ="fill") +
  scale_y_continuous(labels = label_percent(suffix = "%")) + 
  scale_fill_manual(values = c("excellent" = "#B896d4",
                               "standard" = "#Ba955c")) +
  labs(title = "Evaluation of Teachers' Use of Activities",
       x = "Years of Experience",
       y = NULL,
       fill = "Evaluation Rating") +
  theme_bw() +
  theme(
        legend.position = "top"
        )
```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2


#Lab 4, Question 7 
#Made a revision to the colorRampPalette to use the colors that match the example graph
ca_childcare |>
  select(study_year, mc_infant, mc_toddler, mc_preschool, census_region) |>
  mutate(Infant = mc_infant,
         Toddler = mc_toddler, 
         Preschool = mc_preschool) |>
  pivot_longer(cols = c(Infant, Toddler, Preschool),
               names_to = "childcare_center",
               values_to = "median_price") |>
  mutate(childcare_center = fct(childcare_center, 
                                levels = c("Infant",
                                           "Toddler",
                                           "Preschool"))) |>
  ggplot(mapping = aes(x = study_year, 
                    y = median_price,
                    color = fct_reorder2(.f = census_region,
                                        .x = study_year,
                                        .y = median_price,
                                        .fun = last2,
                                        .desc = TRUE))) +
  scale_x_continuous(limits = c(2008, 2018),
                     breaks = seq(2008,2018,2)) +
  scale_y_continuous(limits = c(0,500),
                     breaks = seq(0,500, 100)) +
  scale_color_manual(values = colorRampPalette(brewer.pal(7, "Accent"))(10)) +
  geom_point() +
  geom_smooth(method = "loess",
              linewidth = 0.5,
              fill = "grey",
              alpha = 0.5) +
  facet_wrap(~childcare_center, scales = "free_x") +
  labs(title = "Weekly Median Price for Center-Based Childcare ($)",
       x = "Study Year",
       y = NULL,
       color = "California Region") +
  theme_bw() +
  theme(aspect.ratio = 1,
        axis.text.x = element_text(size = 6))
```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

#Lab 4, Question 9
reg_mod1 <- lm(mc_infant ~ mhi_2018,data = ca_childcare)
summary(reg_mod1)

```

-   Example 2

```{r}
#| label: dsm-2-2

#Lab 2, Question 17
species_mod <- aov(weight ~ species, data = surveys)

summary(species_mod)
```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

Throughout this course I revised my thinking by taking the feedback received from my labs and challenges and understanding how I can incorporate it into future assignments. For example, I received feedback on how I can use functions or operators, such as %in%, and began incorporating it into my future assignments instead of using the or ( \| ) operator. In this portfolio, I revised my thinking by finding ways to incorporate functions I didn't use initially in my labs in order to make the code look more efficient and tidy. These revisions are denoted in each of the code chunks through this portfolio.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

I extended my thinking by taking the time to understand each function and find the most efficient way to incorporate this into my code. To accomplish this, I would ask myself if there was a different way to format my code or other variations of functions. For example, when figuring out how to display both min and max into the same pipeline for lab 3, I wondered if there was a way to slice_min and slice_max instead of using the regular min and max summary functions to see if there was a way to make my process simpler. In this portfolio, I extended my thinking by figuring out examples could be used for multiple learning targets and how they can be revised to apply to more learning targets

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

Below is my peer review from Lab 3. I'm particularly proud of this code because I feel that I gave valuable feedback on code formatting. I first stated which parts of the lab I thought looked great and specified why the simple formatting notations was important. I then explained what could be improved and gave an example on where the improvement can be made.

![](images/clipboard-1817111899.png)

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->

Initially during pair programming, I found it difficult at times because I'm use to sharing my ideas my ideas back and forth in the moment, and sometimes struggle with forming the right questions or recalling how to use functions we learned. However, as we did more practice activities, it became easier to think on my own before asking for help either from my partner or from Dr. T or Jasmine. I got more into the rhythm of asking insightful questions that allow the coder to think on their own without me sharing my ideas.
